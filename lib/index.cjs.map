{"version":3,"file":"index.cjs","sources":["../src/optimizer-registry.js","../src/validate-options.js","../src/index.js"],"sourcesContent":["/**\n * Optimizer Registry for metalsmith-optimize-html\n * \n * Centralizes the registration and loading of HTML optimizers\n * using a functional approach.\n * \n * @module optimizer-registry\n */\n\n/**\n * @typedef {Object} Optimizer\n * @property {string} name - Unique name of the optimizer\n * @property {Function} optimize - The optimization function\n */\n\n/**\n * Map of option flag names to optimizer file paths\n * @type {Record<string, string>}\n */\nconst OPTIMIZER_MAP = {\n  // Core optimizer - always loaded\n  whitespace: './optimizers/whitespace.js',\n\n  // Optional optimizers - loaded based on options\n  removeComments: './optimizers/comments.js',\n  removeEmptyAttributes: './optimizers/empty-attributes.js',\n  normalizeBooleanAttributes: './optimizers/boolean-attributes.js',\n  cleanUrlAttributes: './optimizers/url-attributes.js',\n  cleanDataAttributes: './optimizers/data-attributes.js',\n  removeTagSpaces: './optimizers/tag-spaces.js',\n  removeDefaultAttributes: './optimizers/default-attributes.js',\n  simplifyDoctype: './optimizers/doctype.js',\n  removeProtocols: './optimizers/protocols.js',\n  safeRemoveAttributeQuotes: './optimizers/safe-attributes-quote-removal.js'\n};\n\n// Cache of import promises\nconst importPromises = new Map();\n\n// Cache of loaded optimizers\nconst optimizers = new Map();\n\n/**\n * Get an optimizer by its flag name\n * \n * @param {string} flag - The flag name\n * @returns {Promise<Optimizer|null>} - The optimizer or null if not found\n */\nasync function getOptimizer(flag) {\n  // Return from cache if already loaded\n  if (optimizers.has(flag)) {\n    return optimizers.get(flag);\n  }\n\n  // Check if this optimizer exists\n  if (!OPTIMIZER_MAP[flag]) {\n    return null;\n  }\n  \n  try {\n    // Create import promise if not already created\n    if (!importPromises.has(flag)) {\n      importPromises.set(\n        flag,\n        import(OPTIMIZER_MAP[flag]).then(module => {\n          const exportName = Object.keys(module)[0];\n          return module[exportName];\n        })\n      );\n    }\n    \n    // Await the import\n    const optimizer = await importPromises.get(flag);\n    \n    // Cache the optimizer\n    optimizers.set(flag, optimizer);\n    \n    return optimizer;\n  } catch (error) {\n    console.warn(`Failed to load optimizer for flag \"${flag}\":`, error);\n    return null;\n  }\n}\n\n/**\n * Load optimizers based on configuration\n * \n * @param {Object} options - Configuration options\n * @returns {Promise<Optimizer[]>} Array of initialized optimizers\n */\nasync function loadOptimizers(options) {\n  const loadedOptimizers = [];\n\n  try {\n    // Always load core whitespace optimizer\n    const whitespaceOptimizer = await getOptimizer('whitespace');\n    if (whitespaceOptimizer) {\n      loadedOptimizers.push(whitespaceOptimizer);\n    }\n  \n    // Dynamically load optional optimizers based on options\n    for (const flag of Object.keys(OPTIMIZER_MAP)) {\n      if (flag === 'whitespace') {continue;} // Skip core optimizer\n  \n      // Load if option is not explicitly disabled\n      if (options[flag] !== false) {\n        // Get all optimizers in parallel instead of using await in a loop\n        const optimizer = await getOptimizer(flag);\n        if (optimizer) {\n          loadedOptimizers.push(optimizer);\n        }\n      }\n    }\n  } catch (error) {\n    console.error('Error loading optimizers:', error);\n  }\n\n  return loadedOptimizers;\n}\n\n/**\n * Clear the optimizer cache - useful for testing\n */\nfunction clearCache() {\n  importPromises.clear();\n  optimizers.clear();\n}\n\nexport default {\n  getOptimizer,\n  loadOptimizers,\n  clearCache\n};","/**\n * Configuration validation for metalsmith-optimize-html\n * @module validate-options\n */\n\n/**\n * @typedef {Object} ValidationResult\n * @property {boolean} valid - Whether the options are valid\n * @property {string[]} errors - Array of error messages if invalid\n */\n\n/**\n * Validate that a value is a boolean or undefined\n * \n * @param {any} value - The value to check\n * @param {string} name - Option name for error message\n * @returns {string|null} - Error message or null if valid\n */\nfunction validateBoolean(value, name) {\n  if (value === undefined || typeof value === 'boolean') {\n    return null;\n  }\n  return `Option \"${name}\" must be a boolean, got ${typeof value}: ${value}`;\n}\n\n/**\n * Validate that a value is a string or undefined\n * \n * @param {any} value - The value to check\n * @param {string} name - Option name for error message\n * @returns {string|null} - Error message or null if valid\n */\nfunction validateString(value, name) {\n  if (value === undefined || typeof value === 'string') {\n    return null;\n  }\n  return `Option \"${name}\" must be a string, got ${typeof value}: ${value}`;\n}\n\n/**\n * Validate that a value is an array of strings or undefined\n * \n * @param {any} value - The value to check\n * @param {string} name - Option name for error message\n * @returns {string|null} - Error message or null if valid\n */\nfunction validateStringArray(value, name) {\n  if (value === undefined) {\n    return null;\n  }\n  \n  if (!Array.isArray(value)) {\n    return `Option \"${name}\" must be an array, got ${typeof value}: ${value}`;\n  }\n  \n  for (let i = 0; i < value.length; i++) {\n    const item = value[i];\n    if (typeof item !== 'string') {\n      return `Option \"${name}\" must contain only strings, item at index ${i} is ${typeof item}: ${item}`;\n    }\n  }\n  \n  return null;\n}\n\n/**\n * Option validators mapped by option name\n * @type {Object.<string, function>}\n */\nconst VALIDATORS = {\n  // Core options\n  pattern: validateString,\n  excludeTags: validateStringArray,\n  aggressive: validateBoolean,\n  \n  // Feature options\n  removeComments: validateBoolean,\n  removeTagSpaces: validateBoolean,\n  normalizeBooleanAttributes: validateBoolean,\n  cleanUrlAttributes: validateBoolean,\n  removeProtocols: validateBoolean,\n  removeDefaultAttributes: validateBoolean,\n  cleanDataAttributes: validateBoolean,\n  simplifyDoctype: validateBoolean,\n  safeRemoveAttributeQuotes: validateBoolean,\n  removeEmptyAttributes: validateBoolean,\n};\n\n/**\n * Validate user options against the expected schema\n * \n * @param {Object} options - User options to validate\n * @returns {ValidationResult} - Validation result\n */\nfunction validateOptions(options) {\n  const errors = [];\n  \n  // Ensure options is an object\n  if (!options || typeof options !== 'object' || Array.isArray(options)) {\n    return {\n      valid: false,\n      errors: ['Options must be an object']\n    };\n  }\n  \n  // Check for unknown options\n  for (const key of Object.keys(options)) {\n    if (!Object.prototype.hasOwnProperty.call(VALIDATORS, key)) {\n      errors.push(`Unknown option \"${key}\"`);\n    }\n  }\n  \n  // Validate each option\n  for (const [name, validator] of Object.entries(VALIDATORS)) {\n    if (Object.prototype.hasOwnProperty.call(options, name)) {\n      const error = validator(options[name], name);\n      if (error) {\n        errors.push(error);\n      }\n    }\n  }\n  \n  return {\n    valid: errors.length === 0,\n    errors\n  };\n}\n\n/**\n * Format validation errors into a readable message\n * \n * @param {string[]} errors - Array of error messages\n * @returns {string} - Formatted error message\n */\nfunction formatValidationErrors(errors) {\n  return [\n    'Invalid options for metalsmith-optimize-html:',\n    ...errors.map(err => `  - ${err}`)\n  ].join('\\n');\n}\n\nexport default {\n  validateOptions,\n  formatValidationErrors\n};","/**\n * Metalsmith plugin for HTML optimization\n * @module metalsmith-optimize-html\n */\n\nimport optimizerRegistry from './optimizer-registry.js';\nimport validator from './validate-options.js';\n\n// Configuration defaults\nconst BASE_OPTIONS = {\n  pattern: '**/*.html',\n  excludeTags: []\n};\n\nconst DEFAULT_AGGRESSIVE_OPTIONS = {\n  removeComments: true,\n  removeTagSpaces: true,\n  normalizeBooleanAttributes: true,\n  cleanUrlAttributes: true,\n  removeProtocols: true,\n  removeDefaultAttributes: true,\n  cleanDataAttributes: true,\n  simplifyDoctype: true,\n  safeRemoveAttributeQuotes: true\n};\n\n/**\n * @typedef {Object} Optimizer\n * @property {string} name - The name of the optimizer\n * @property {Function} optimize - The optimization function that processes HTML content\n */\n\n/**\n * Process content with optimizers, handling excluded tags if specified\n * @param {string} content - The HTML content to process\n * @param {Optimizer[]} optimizers - The array of optimizers to apply\n * @param {Object} options - Configuration options\n * @returns {string} - The processed HTML content\n */\nfunction processContent(content, optimizers, options) {\n  // If we have tags to exclude from processing\n  if (options.excludeTags?.length > 0) {\n    const preserved = [];\n    const excludePattern = new RegExp(`<(${options.excludeTags.join('|')})[^>]*>[\\\\s\\\\S]*?</\\\\1>`, 'gi');\n\n    // Preserve excluded tags\n    content = content.replace(excludePattern, (match) => {\n      preserved.push(match);\n      return `___EXCLUDE_${preserved.length - 1}___`;\n    });\n\n    // Apply optimizers\n    content = optimizers.reduce(\n      (result, optimizer) => optimizer.optimize(result, options), \n      content\n    );\n\n    // Restore excluded content\n    return preserved.reduce(\n      (text, preservedContent, i) => text.replace(`___EXCLUDE_${i}___`, preservedContent),\n      content\n    );\n  } \n  \n  // Normal optimization without exclusions\n  return optimizers.reduce(\n    (result, optimizer) => optimizer.optimize(result, options), \n    content\n  );\n}\n\n/**\n * Creates a Metalsmith plugin for HTML optimization\n *\n * @param {Object} userOptions - Configuration options\n * @param {string} [userOptions.pattern] - Glob pattern for matching files\n * @param {string[]} [userOptions.excludeTags] - HTML tags to exclude from optimization\n * @param {boolean} [userOptions.aggressive] - Enable all optimizations\n * @returns {Function} Metalsmith plugin function\n * @throws {Error} If options are invalid\n */\nexport default function optimizeHTML(userOptions = {}) {\n  // Validate user options\n  const validation = validator.validateOptions(userOptions);\n  if (!validation.valid) {\n    throw new Error(validator.formatValidationErrors(validation.errors));\n  }\n  \n  // Merge options with defaults\n  const options = {\n    ...BASE_OPTIONS,\n    ...(userOptions.aggressive ? DEFAULT_AGGRESSIVE_OPTIONS : {}),\n    ...userOptions\n  };\n\n  // Cache optimizers for reuse across multiple files\n  let optimizers;\n\n  /**\n   * The plugin function\n   * @param {Object} files - Metalsmith files object\n   * @param {Object} metalsmith - Metalsmith instance\n   * @param {Function} done - Callback function\n   */\n  const plugin = async function (files, metalsmith, done) {\n    try {\n      // Load optimizers on first run\n      if (!optimizers) {\n        optimizers = await optimizerRegistry.loadOptimizers(options);\n      }\n\n      const debug = metalsmith.debug('metalsmith-optimize-html');\n      debug('running with options: %O', options);\n\n      const activeOptimizers = plugin._testOptimizers || optimizers;\n\n      // Process each file\n      for (const [filename, file] of Object.entries(files)) {\n        // Use metalsmith.match to leverage built-in file matching capabilities\n        const matchedFiles = metalsmith.match(options.pattern, [filename]);\n        if (matchedFiles.length === 0) {continue;}\n        \n        // Get content and process it\n        const content = file.contents.toString();\n        const optimizedContent = processContent(content, activeOptimizers, options);\n        \n        // Update file with optimized content\n        file.contents = Buffer.from(optimizedContent);\n      }\n      \n      done();\n    } catch (error) {\n      done(error);\n    }\n  };\n\n  // Property for testing\n  plugin._testOptimizers = null;\n  \n  return plugin;\n}"],"names":["OPTIMIZER_MAP","whitespace","removeComments","removeEmptyAttributes","normalizeBooleanAttributes","cleanUrlAttributes","cleanDataAttributes","removeTagSpaces","removeDefaultAttributes","simplifyDoctype","removeProtocols","safeRemoveAttributeQuotes","importPromises","Map","optimizers","getOptimizer","flag","has","get","set","then","module","exportName","Object","keys","optimizer","error","console","warn","loadOptimizers","options","loadedOptimizers","whitespaceOptimizer","push","clearCache","clear","validateBoolean","value","name","undefined","validateString","validateStringArray","Array","isArray","i","length","item","VALIDATORS","pattern","excludeTags","aggressive","validateOptions","errors","valid","key","prototype","hasOwnProperty","call","validator","entries","formatValidationErrors","map","err","join","BASE_OPTIONS","DEFAULT_AGGRESSIVE_OPTIONS","processContent","content","_options$excludeTags","preserved","excludePattern","RegExp","replace","match","reduce","result","optimize","text","preservedContent","optimizeHTML","userOptions","validation","Error","plugin","files","metalsmith","done","optimizerRegistry","debug","activeOptimizers","_testOptimizers","filename","file","matchedFiles","contents","toString","optimizedContent","Buffer","from"],"mappings":"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"}