{"version":3,"file":"whitespace-9f767e4b.js","sources":["../src/optimizers/whitespace.js"],"sourcesContent":["/**\n * Whitespace optimization module\n * Handles complex whitespace optimization in HTML content while preserving\n * necessary formatting and spacing.\n *\n * @module whitespace-optimizer\n *\n * Core functionality:\n * - Collapses multiple whitespace characters to single space\n * - Removes unnecessary whitespace between HTML tags\n * - Preserves exact whitespace in special tags (pre, code, etc.)\n * - Maintains appropriate spacing around inline elements based on context\n * - Creates single-line output except for preserved content\n * - Handles nested inline elements correctly\n *\n * Processing steps:\n * 1. Preserve special tags (pre, code, etc.) with exact whitespace\n * 2. Process inline elements maintaining contextual spacing\n * 3. Handle remaining block-level content\n * 4. Restore preserved content\n */\n\nexport const whitespaceOptimizer = {\n  name: 'whitespace',\n\n  /**\n   * Optimizes HTML content by managing whitespace in various contexts\n   * @param {string} content - HTML content to optimize\n   * @returns {string} Optimized HTML content\n   */\n  optimize: (content, options = {}) => {\n    // Tags that must maintain exact internal whitespace\n    // These are typically code-related or formatting-specific elements\n    const preserveTags = [\n      'pre',\n      'code',\n      'textarea',\n      'script',\n      'style',\n      ...(options.excludeTags || []) // Additional exclusions, like web-components\n    ];\n\n    // Inline elements that may affect text flow and spacing\n    // These elements should maintain spacing based on their context\n    const inlineTags = [\n      'a',\n      'span',\n      'em',\n      'strong',\n      'b',\n      'i',\n      'u',\n      's', // Basic text formatting\n      'small',\n      'mark',\n      'sub',\n      'sup', // Text presentation\n      'time',\n      'cite',\n      'abbr', // Semantic elements\n      'label',\n      'svg' // UI and graphics elements\n    ];\n\n    // Storage for content that must be preserved or processed separately\n    const preserved = [];\n\n    // STEP 1: Preserve special tags\n    // Matches complete tag pairs with their content and preserves them exactly\n    let html = content.replace(new RegExp(`(<(${preserveTags.join('|')})[^>]*>[\\\\s\\\\S]*?</\\\\2>)`, 'gi'), (match) => {\n      preserved.push(match);\n      return `___PRESERVE_${preserved.length - 1}___`;\n    });\n\n    // STEP 2: Handle inline elements\n    // Complex regex pattern to match inline elements with their surrounding context\n    const inlinePattern = new RegExp(\n      `(\\\\s*)` + // Leading whitespace\n        `(<(${inlineTags.join('|')})[^>]*>)` + // Opening tag with attributes\n        `([^<]*(?:(?!</\\\\3)[\\\\s\\\\S])*?)` + // Content (including nested elements)\n        `(</\\\\3>)` + // Closing tag\n        `(\\\\s*)`, // Trailing whitespace\n      'gi'\n    );\n\n    // Process nested inline elements iteratively from inside out\n    let lastHtml;\n    do {\n      lastHtml = html;\n      html = html.replace(inlinePattern, (match, beforeSpace, openTag, tagName, content, closeTag, afterSpace) => {\n        // Normalize internal whitespace while preserving content\n        const normalizedContent = content.replace(/\\s+/g, ' ').trim();\n        const normalized = `${openTag}${normalizedContent}${closeTag}`;\n        preserved.push(normalized);\n\n        // Maintain contextual spacing - keep single space only where space existed\n        const leadSpace = beforeSpace.length > 0 ? ' ' : '';\n        const trailSpace = afterSpace.length > 0 ? ' ' : '';\n        return `${leadSpace}___INLINE_${preserved.length - 1}___${trailSpace}`;\n      });\n    } while (html !== lastHtml); // Continue until all nested elements are processed\n\n    // STEP 3: Process remaining block-level content\n    // Split content into tags and text, process text portions\n    const blockParts = html.split(/(<\\/?[^>]+>)/g);\n    html = blockParts\n      .map((part) => {\n        if (part.startsWith('<')) return part; // Keep tags unchanged\n        return part.replace(/\\s+/g, ' ').trim(); // Normalize text content\n      })\n      .join('')\n      .trim();\n\n    // STEP 4: Restore preserved content\n    // Replace placeholders with their preserved content in correct order\n    return preserved.reduce(\n      (text, content, i) =>\n        text\n          .replace(`___PRESERVE_${i}___`, content) // Restore preserved tags\n          .replace(`___INLINE_${i}___`, content), // Restore inline elements\n      html\n    );\n  }\n};\n"],"names":["whitespaceOptimizer","name","optimize","content","options","preserveTags","excludeTags","inlineTags","preserved","html","replace","RegExp","join","match","push","length","inlinePattern","lastHtml","beforeSpace","openTag","tagName","closeTag","afterSpace","normalizedContent","trim","normalized","leadSpace","trailSpace","blockParts","split","map","part","startsWith","reduce","text","i"],"mappings":"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"}